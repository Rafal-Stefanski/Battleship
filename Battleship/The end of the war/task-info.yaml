type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    /**
     * Rules of the game Battleship https://en.wikipedia.org/wiki/Battleship_(game)
     */

    public class Main {

        public static String[][] board = new String[11][11];

        public static void main(String[] args) {

            // Write your code here

            printBoard();
            addShip();

        }

        public static void printBoard() {

    //        String[][] board = new String[11][11];

            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        board[i][j] = " ";
                    } else if (i == 0) {
                        board[i][j] = Integer.toString(j);
                    } else if (j == 0) {
                        board[i][j] = Character.toString(64 + i);
                    } else {
                        board[i][j] = "~";
                    }
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public static String[][] addShip() {

            try (Scanner scanner = new Scanner(System.in)) {
                System.out.print("Enter the coordinates of the Aircraft Carrier (5 cells):\n\n> ");
                String coordinate1 = scanner.next();
                String coordinate2 = scanner.next();
                scanner.close();
                boolean ifHorizontal, ifVertical;

                // change coordinate to place on board
                String i1 = coordinate1.toLowerCase().substring(0,1); // letter (horizontal)
                int j1 = Integer.parseInt(coordinate1.substring(1));  // number (vertical)




                System.out.println("i1 = " + i1);
                System.out.println("j1 = " + j1);

            }

            return board;

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    public class Board {
        public static String[][] board = new String[11][11];
        public static String[][] hiddenBoard = new String[11][11];

        public static void prepareBoard() {

            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        board[i][j] = " ";
                        hiddenBoard[i][j] = " ";
                    } else if (i == 0) {
                        board[i][j] = Integer.toString(j);
                        hiddenBoard[i][j] = Integer.toString(j);
                    } else if (j == 0) {
                        board[i][j] = Character.toString(64 + i);
                        hiddenBoard[i][j] = Character.toString(64 + i);
                    } else {
                        board[i][j] = "~";
                        hiddenBoard[i][j] = "~";
                    }
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public static void printBoard() {
            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public static void printHiddenBoard() {
            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    System.out.print(hiddenBoard[i][j] + " ");
                }
            }
            System.out.println("\n");
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {

        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship",4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        public final String name;
        public final int size;

        Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {

        public static Scanner scanner = new Scanner(System.in);

        public static void addShip(Ship ship) {

            // lets get some coordinates
            scanner.reset();
            scanner = new Scanner(System.in);

            label:
            while (true) {
                System.out.print("Enter the coordinates of the " + ship.getName() + " (" + ship.getSize() + " cells):\n> ");
                String coordinate1 = scanner.next();
                String coordinate2 = scanner.next();

                // coordinates on board to ints
                int x1 = Character.toUpperCase(coordinate1.charAt(0)) - 'A' + 1;  // letter (horizontal)
                int y1 = Integer.parseInt(coordinate1.substring(1));               // number (vertical)

                int x2 = Character.toUpperCase(coordinate2.charAt(0)) - 'A' + 1;  // letter (horizontal)
                int y2 = Integer.parseInt(coordinate2.substring(1));               // number (vertical)

                // checking and validating coordinates range and placement on the board
                if (x1 > 0 && y1 > 0 && x1 <= 10 && y1 <= 10 && x2 > 0 && y2 > 0 && x2 <= 10 && y2 <= 10) {
                    // changing places when first value is larger
                    if (x1 > x2) {
                        int tempX1 = x2;
                        x2 = x1;
                        x1 = tempX1;
                    }
                    if (y1 > y2) {
                        int tempY1 = y2;
                        y2 = y1;
                        y1 = tempY1;
                    }

                    // checking positions
                    if (x1 == x2) {                             // it's horizontal!
                        if ((y2 - y1 + 1) == ship.getSize()) {  // ship size is OK!
    //                    System.out.println("size OK!");

                            //checking placement on the board for collisions and overlapping - horizontally
                            for (int i = y1; i <= y2; i++) {
                                if (Board.board[x1][i].equals("O")) {
                                    System.out.println("Error! This place is occupied.\n");
                                    continue label;
                                }
                                if (x1 != 10) {
                                    if (Board.board[x1 + 1][i].equals("O") || Board.board[x1 - 1][i].equals("O")) {
                                        System.out.println("Error! There is other ship over or under next to this place.\n");
                                        continue label;
                                    }
    //                            } else if (x1 == 1) {
    //                                if (Board.board[x1 + 1][i].equals("O")) {
    //                                    System.out.println("Error! There is other ship below, next to this place.\n");
    //                                    continue label;
    //                                }
                                } else {
                                    if (Board.board[x1 - 1][i].equals("O")) {
                                        System.out.println("Error! There is other ship below, next to this place.\n");
                                        continue label;
                                    }
                                }
                                if (y2 != 10) {
                                    if (Board.board[x1][y1 - 1].equals("O") || Board.board[x1][y2 + 1].equals("O")) {
                                        System.out.println("Error! There is other ship on the left or right next to this place.\n");
                                        continue label;
                                    }
                                } else {
                                    if (Board.board[x1][y1 - 1].equals("O")) {
                                        System.out.println("Error! There is other ship on the left next to this place.\n");
                                        continue label;
                                    }
                                }
                            }
                            for (int i = y1; i <= y2; i++) {
                                Board.board[x1][i] = "O";
                            }
                            Board.printBoard();
                            break;
                        } else {
                            System.out.println("Error! Wrong ship size! Try again.\n");
                        }
                    } else if (y1 == y2) {                      // it's vertical!
                        if ((x2 - x1 + 1) == ship.getSize()) {  // ship size is OK!
    //                    System.out.println("size OK!");

                            //checking placement on the board for collisions and overlapping - vertically
                            for (int i = x1; i <= x2; i++) {
                                if (Board.board[i][y1].equals("O")) {
                                    System.out.println("Error! This place is occupied.\n");
                                    continue label;
                                }
                                if (x2 != 10) {
                                    if (Board.board[i + 1][y1].equals("O") || Board.board[i - 1][y1].equals("O")) {
                                        System.out.println("Error! There is other ship over or under next to this place.\n");
                                        continue label;
                                    }
    //                            } else if (y1 == 1) {
    //                                if (Board.board[i][y1 + 1].equals("O")) {
    //                                    System.out.println("Error! There is other ship below, next to this place.\n");
    //                                    continue label;
    //                                }
    //                            } else {
    //                                if (Board.board[i - 1][y1].equals("O")) {                      // possibly unnecessary !
    //                                    System.out.println("Error! There is other ship above.\n");
    //                                    continue label;
    //                                }
                                }
                                if (y1 != 10) {
                                    if (Board.board[i][y1 - 1].equals("O") || Board.board[i][y2 + 1].equals("O")) {
                                        System.out.println("Error! There is other ship on the left or right next to this place.\n");
                                        continue label;
                                    }
                                } else {
                                    if (Board.board[i][y1 - 1].equals("O")) {
                                        System.out.println("Error! There is other ship on the left next to this place.\n");
                                        continue label;
                                    }
                                }
                            }

                            for (int i = x1; i <= x2; i++) {
                                Board.board[i][y1] = "O";
                            }
                            Board.printBoard();
                            break;
                        } else {
                            System.out.println("Error! Wrong ship size! Try again.\n");
                        }
                    } else {
                        System.out.println("Error! Wrong ship location! Looks like it's cross-draw. Try again.\n");
                    }
                } else {
                    System.out.println("Error! Wrong location! Looks like it's out of board range. Try again.\n");
                }
            }   // end of while loop
        }

        public static void play() {

    //        boolean shotLoop = true;
            System.out.println("The game starts!");
            Board.printHiddenBoard();
            System.out.print("Take a shot!\n\n> ");

            // checking and validating coordinates range and placement on the board
            while (true) {
                scanner.reset();
                scanner = new Scanner(System.in);
                String shotCoordinate = scanner.next();
                // coordinates on board to ints
                int x1 = Character.toUpperCase(shotCoordinate.charAt(0)) - 'A' + 1;  // letter (horizontal)
                int y1 = Integer.parseInt(shotCoordinate.substring(1));               // number (vertical)
                if (x1 > 0 && y1 > 0 && x1 <= 10 && y1 <= 10) {
                    if (Board.board[x1][y1].equals("O")) {
                        Board.board[x1][y1] = "X";
                        Board.hiddenBoard[x1][y1] = "X";
                        Board.printHiddenBoard();
                        System.out.println("You hit a ship!");
                    } else {
                        Board.board[x1][y1] = "M";
                        Board.hiddenBoard[x1][y1] = "M";
                        Board.printHiddenBoard();
                        System.out.println("You missed!");
                    }
                    Board.printBoard();
    //                shotLoop = false;
                    break;
                } else {
                    System.out.print("\nError! You entered the wrong coordinates! Try again:\n\n> ");
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/ShipLocation.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #2\n\nCan&#39;t parse the game field\nMake sure you\
    \ print it like in examples!\n\nPlease find below the output of your program during\
    \ this failed test.\nNote that the &#39;&gt;&#39; character indicates the beginning\
    \ of the input line.\n\n---\n\n\n  1 2 3 4 5 6 7 8 9 10 \nA ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\
    E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nEnter the\
    \ coordinates of the Aircraft Carrier (5 cells):\n&gt; &gt; J3 J7\n\n  1 2 3 4\
    \ 5 6 7 8 9 10 \nA ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ \nJ ~ ~ O O O O O ~ ~ ~ \n\nEnter the coordinates of the Battleship (4 cells):\n\
    &gt; &gt; C8 B8\nError! Wrong ship size! Try again.\n\nEnter the coordinates of\
    \ the Battleship (4 cells):\n&gt; &gt; C8 F8\n\n  1 2 3 4 5 6 7 8 9 10 \nA ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nD ~ ~ ~ ~\
    \ ~ ~ ~ O ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nG ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ O O O O O ~\
    \ ~ ~ \n\nEnter the coordinates of the Submarine (3 cells):\n&gt; &gt; A1 C2\n\
    Error! Wrong ship location! Looks like it&#39;s cross-draw. Try again.\n\nEnter\
    \ the coordinates of the Submarine (3 cells):\n&gt; &gt; A1 C1\n\n  1 2 3 4 5\
    \ 6 7 8 9 10 \nA O ~ ~ ~ ~ ~ ~ ~ ~ ~ \nB O ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC O ~ ~ ~ ~ ~ ~\
    \ O ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ O ~\
    \ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\
    J ~ ~ O O O O O ~ ~ ~ \n\nEnter the coordinates of the Cruiser (3 cells):\n&gt;\
    \ &gt; H1 H3\n\n  1 2 3 4 5 6 7 8 9 10 \nA O ~ ~ ~ ~ ~ ~ ~ ~ ~ \nB O ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ \nC O ~ ~ ~ ~ ~ ~ O ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ O\
    \ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH O O O ~ ~ ~ ~ ~ ~ ~\
    \ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ O O O O O ~ ~ ~ \n\nEnter the coordinates of\
    \ the Destroyer (2 cells):\n&gt; &gt; G2 E2\nError! Wrong ship size! Try again.\n\
    \nEnter the coordinates of the Destroyer (2 cells):\n&gt; &gt; B5 C5\n\n  1 2\
    \ 3 4 5 6 7 8 9 10 \nA O ~ ~ ~ ~ ~ ~ ~ ~ ~ \nB O ~ ~ ~ O ~ ~ ~ ~ ~ \nC O ~ ~ ~\
    \ O ~ ~ O ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ O ~ ~ \nF ~ ~ ~ ~ ~ ~\
    \ ~ O ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH O O O ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \nJ ~ ~ O O O O O ~ ~ ~ \n\nThe game starts!\n\n  1 2 3 4 5 6 7 8 9 10 \n\
    A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ \n\nTake a shot!\n\n&gt; &gt; A1\n\n  1 2 3 4 5 6 7 8 9 10 \nA X ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ \n\nYou sank a ship!\n&gt; A2\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~\
    \ ~ ~ ~ \nB ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\
    H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou\
    \ missed! Try again:\n\n&gt; &gt; B1\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~\
    \ ~ ~ ~ ~ \nB X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\n\
    You sank a ship!\n&gt; C1\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \n\
    B X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nC X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n\
    &gt; D1\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \nC X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ \nF ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou missed! Try again:\n\n&gt;\
    \ &gt; F5\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ ~ ~ ~ ~\
    \ ~ ~ ~ \nC X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ \nF ~ ~ ~ ~ M ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\
    I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou missed! Try again:\n\n&gt;\
    \ &gt; B5\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ ~ X ~ ~\
    \ ~ ~ ~ \nC X ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ \nF ~ ~ ~ ~ M ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\
    I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n&gt; B4\n\n\
    \  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~\
    \ ~ M ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou missed! Try again:\n\n&gt; &gt; C5\n\
    \n  1 2 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X\
    \ ~ ~ ~ X ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~\
    \ ~ M ~ ~ ~ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nI ~ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n&gt; H8\n\n  1 2 3 4\
    \ 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~ X ~\
    \ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ M ~ ~ ~\
    \ ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\
    \ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou missed! Try again:\n\n&gt; &gt; F8\n\n  1 2\
    \ 3 4 5 6 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~\
    \ X ~ ~ ~ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ M ~\
    \ ~ X ~ ~ \nG ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n&gt; G8\n\n  1 2 3 4 5 6 7\
    \ 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~ X ~ ~ ~ ~\
    \ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nF ~ ~ ~ ~ M ~ ~ X ~ ~ \n\
    G ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou missed! Try again:\n\n&gt; &gt; E8\n\n  1 2 3 4 5 6\
    \ 7 8 9 10 \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~ X ~ ~ ~\
    \ ~ ~ \nD M ~ ~ ~ ~ ~ ~ ~ ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ X ~ ~ \nF ~ ~ ~ ~ M ~ ~ X ~ ~\
    \ \nG ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ\
    \ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n&gt; D8\n\n  1 2 3 4 5 6 7 8 9 10\
    \ \nA X M ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~ X ~ ~ ~ ~ ~ \nD\
    \ M ~ ~ ~ ~ ~ ~ X ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ X ~ ~ \nF ~ ~ ~ ~ M ~ ~ X ~ ~ \nG ~ ~\
    \ ~ ~ ~ ~ ~ M ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~\
    \ ~ ~ ~ ~ ~ ~ \n\nYou sank a ship!\n&gt; C8\n\n  1 2 3 4 5 6 7 8 9 10 \nA X M\
    \ ~ ~ ~ ~ ~ ~ ~ ~ \nB X ~ ~ M X ~ ~ ~ ~ ~ \nC X ~ ~ ~ X ~ ~ X ~ ~ \nD M ~ ~ ~\
    \ ~ ~ ~ X ~ ~ \nE ~ ~ ~ ~ ~ ~ ~ X ~ ~ \nF ~ ~ ~ ~ M ~ ~ X ~ ~ \nG ~ ~ ~ ~ ~ ~\
    \ ~ M ~ ~ \nH ~ ~ ~ ~ ~ ~ ~ M ~ ~ \nI ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \nJ ~ ~ ~ ~ ~ ~ ~ ~\
    \ ~ ~ \n\nYou sank a ship!\n&gt; D8\n\nYou hit a ship! Try again:\n&gt;"
  time: Mon, 12 Apr 2021 20:10:59 UTC
record: -1
