type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    /**
     * Rules of the game Battleship https://en.wikipedia.org/wiki/Battleship_(game)
     */

    public class Main {

        public static String[][] board = new String[11][11];

        public static void main(String[] args) {

            // Write your code here

            printBoard();
            addShip();

        }

        public static void printBoard() {

    //        String[][] board = new String[11][11];

            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        board[i][j] = " ";
                    } else if (i == 0) {
                        board[i][j] = Integer.toString(j);
                    } else if (j == 0) {
                        board[i][j] = Character.toString(64 + i);
                    } else {
                        board[i][j] = "~";
                    }
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public static String[][] addShip() {

            try (Scanner scanner = new Scanner(System.in)) {
                System.out.print("Enter the coordinates of the Aircraft Carrier (5 cells):\n\n> ");
                String coordinate1 = scanner.next();
                String coordinate2 = scanner.next();
                scanner.close();
                boolean ifHorizontal, ifVertical;

                // change coordinate to place on board
                String i1 = coordinate1.toLowerCase().substring(0,1); // letter (horizontal)
                int j1 = Integer.parseInt(coordinate1.substring(1));  // number (vertical)




                System.out.println("i1 = " + i1);
                System.out.println("j1 = " + j1);

            }

            return board;

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Board.java
  visible: true
  text: |-
    package battleship;

    public class Board {
        final private String[][] board = new String[11][11];
        final private String[][] hiddenBoard = new String[11][11];

    //    private int shipCounter = 7; // 2 ships = 7 cells for testing
        private int shipCounter = (5 + 4 + 3 + 3 + 2); // all ships


        public int getShipCounter() {
            return shipCounter;
        }

        public void setShipCounter(int shipCounter) {
            this.shipCounter = shipCounter;
        }

        public String[][] getBoard() {
            return board;
        }

        public String[][] getHiddenBoard() {
            return hiddenBoard;
        }

        public void prepareBoardAndHiddenBoard() {

            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j == 0) {
                        board[i][j] = " ";
                        hiddenBoard[i][j] = " ";
                    } else if (i == 0) {
                        board[i][j] = Integer.toString(j);
                        hiddenBoard[i][j] = Integer.toString(j);
                    } else if (j == 0) {
                        board[i][j] = Character.toString(64 + i);
                        hiddenBoard[i][j] = Character.toString(64 + i);
                    } else {
                        board[i][j] = "~";
                        hiddenBoard[i][j] = "~";
                    }
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public void printBoard() {
            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    System.out.print(board[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public void printHiddenBoard() {
            for (int i = 0; i < 11; i++) {
                System.out.println();
                for (int j = 0; j < 11; j++) {
                    System.out.print(hiddenBoard[i][j] + " ");
                }
            }
            System.out.println("\n");
        }

        public void shipHitCounter(int x, int y) {

    //        int[] aircraftCarrierLoc = Ship.AIRCRAFT_CARRIER.getShipLocation();
    //        int[] battleshipLoc = Ship.BATTLESHIP.getShipLocation();
    //        int[] submarineLoc = Ship.SUBMARINE.getShipLocation();
    //        int[] cruiserLoc = Ship.CRUISER.getShipLocation();
    //        int[] destroyerLoc = Ship.DESTROYER.getShipLocation();

            checker(x, y, Ship.AIRCRAFT_CARRIER.getShipLocation());
            checker(x, y, Ship.BATTLESHIP.getShipLocation());
            checker(x, y, Ship.SUBMARINE.getShipLocation());
            checker(x, y, Ship.CRUISER.getShipLocation());
            checker(x, y, Ship.DESTROYER.getShipLocation());

    //        int hit = checker(x, y, submarineLoc);
    //        System.out.println("checker = " + hit + " x = " + x + ", y = " + y);


    //        System.out.println("******* test section / ********");
    //        if (checker(x, y, aircraftCarrierLoc) != aircraftCarrierLoc.length) {
    //            System.out.println("You hit " + Ship.AIRCRAFT_CARRIER.getName() + ". There are: " + checker(x, y, aircraftCarrierLoc) + ", segments left.");
    //        }
    //        if (checker(x, y, battleshipLoc) != battleshipLoc.length) {
    //            System.out.println("You hit " + Ship.BATTLESHIP.getName() + ". There are: " + checker(x, y, battleshipLoc) + ", segments left.");
    //        }
    //        if (checker(x, y, submarineLoc) != submarineLoc.length) {
    //            System.out.println("You hit " + Ship.SUBMARINE.getName() + ". There are: "  + ", segments left.");
    //        }
    //        if (checker(x, y, cruiserLoc) != cruiserLoc.length) {
    //            System.out.println("You hit " + Ship.CRUISER.getName() + ". There are: " + checker(x, y, cruiserLoc) + ", segments left.");
    //        }
    //        if (checker(x, y, destroyerLoc) != destroyerLoc.length) {
    //            System.out.println("You hit " + Ship.DESTROYER.getName() + ". There are: " + checker(x, y, destroyerLoc) + ", segments left.");
    //        }
    //        System.out.println("******* / test section ********");

        }

        public void checker(int x, int y, int[] shipArrayLoc) {
            int shipLengthLeft = 0;
            boolean sunkenShip = true;

            for (int j = 0; j < shipArrayLoc.length; j++) {
                if (shipArrayLoc[j] != 0) {
                    shipLengthLeft++;
                    sunkenShip = false;
                }
            }

            for (int i = 0; i < shipArrayLoc.length; i++) {
                if (shipArrayLoc[i] == (x * 10 + y)) {
                    shipArrayLoc[i] = 0;
                    shipLengthLeft--;
                    shipCounter--;

                    System.out.print("\nYou hit a ship! ");

                    if (shipLengthLeft == 0) {
                        System.out.println("You sank a ship!");
                    }
                    if (shipCounter != 0 && shipLengthLeft==0) {
                        System.out.print("Specify a new target:\n\n> ");
                    } else if (shipCounter != 0) {
                        System.out.print("Try again:\n\n> ");
    //                    System.out.println("*** testing *** \n" + "shipCounter " + shipCounter);
                    }

    //                if (shipLengthLeft == 0 && shipCounter == 0) {
    //                    System.out.println("You sank the last ship. You won. Congratulations!");
    ////                    sunkenShip = true;
    //                }
                    break;
                }
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {

        AIRCRAFT_CARRIER("Aircraft Carrier", 5, new int[5]),
        BATTLESHIP("Battleship", 4, new int[4]),
        SUBMARINE("Submarine", 3, new int[3]),
        CRUISER("Cruiser", 3, new int[3]),
        DESTROYER("Destroyer", 2, new int[2]);

        public String name;
        public int size;
        public int[] shipLocation;

        Ship(String name, int size, int[] shipLocation) {
            this.name = name;
            this.size = size;
            this.shipLocation = shipLocation;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }

        public int[] getShipLocation() {
            return shipLocation;
        }

        public void setShipLocation(int[] shipLocation) {
            this.shipLocation = shipLocation;
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: "package battleship;\n\nimport java.util.Scanner;\n\npublic class Game {\n\
    \n    private final Board board = new Board();\n    public static Scanner scanner\
    \ = new Scanner(System.in);\n    static int shipCounter;\n\n    public void prepareBoard()\
    \ {\n        board.prepareBoardAndHiddenBoard();\n    }\n\n    public void addShip(Ship\
    \ ship) {\n        // added array to store location of each ship\n        int[]\
    \ arrayOfShipLocations = new int[ship.getSize()];\n\n        // lets get some\
    \ coordinates\n        scanner.reset();\n        scanner = new Scanner(System.in);\n\
    \n        label:\n        while (true) {\n            System.out.print(\"Enter\
    \ the coordinates of the \" + ship.getName() + \" (\" + ship.getSize() + \" cells):\\\
    n> \");\n            String coordinate1 = scanner.next();\n            String\
    \ coordinate2 = scanner.next();\n\n            // coordinates on board to ints\n\
    \            int x1 = Character.toUpperCase(coordinate1.charAt(0)) - 'A' + 1;\
    \  // letter (horizontal)\n            int y1 = Integer.parseInt(coordinate1.substring(1));\
    \               // number (vertical)\n\n            int x2 = Character.toUpperCase(coordinate2.charAt(0))\
    \ - 'A' + 1;  // letter (horizontal)\n            int y2 = Integer.parseInt(coordinate2.substring(1));\
    \               // number (vertical)\n\n            // checking and validating\
    \ coordinates range and placement on the board\n            if (x1 > 0 && y1 >\
    \ 0 && x1 <= 10 && y1 <= 10 && x2 > 0 && y2 > 0 && x2 <= 10 && y2 <= 10) {\n \
    \               // changing places when first value is larger\n              \
    \  if (x1 > x2) {\n                    int tempX1 = x2;\n                    x2\
    \ = x1;\n                    x1 = tempX1;\n                }\n               \
    \ if (y1 > y2) {\n                    int tempY1 = y2;\n                    y2\
    \ = y1;\n                    y1 = tempY1;\n                }\n\n             \
    \   // checking positions\n                if (x1 == x2) {                   \
    \          // it's horizontal!\n                    if ((y2 - y1 + 1) == ship.getSize())\
    \ {  // ship size is OK!\n//                    System.out.println(\"size OK!\"\
    );\n\n                        //checking placement on the board for collisions\
    \ and overlapping - horizontally\n                        for (int i = y1; i <=\
    \ y2; i++) {\n                            if (board.getBoard()[x1][i].equals(\"\
    O\")) {\n                                System.out.println(\"Error! This place\
    \ is occupied.\\n\");\n                                continue label;\n     \
    \                       }\n                            if (x1 != 10) {\n     \
    \                           if (board.getBoard()[x1 + 1][i].equals(\"O\") || board.getBoard()[x1\
    \ - 1][i].equals(\"O\")) {\n                                    System.out.println(\"\
    Error! You placed it too close to another one. Try again:\\n\");\n           \
    \                         continue label;\n                                }\n\
    \                            } else {\n                                if (board.getBoard()[x1\
    \ - 1][i].equals(\"O\")) {\n                                    System.out.println(\"\
    Error! You placed it too close to another one. Try again:\\n\");\n           \
    \                         continue label;\n                                }\n\
    \                            }\n                            if (y2 != 10) {\n\
    \                                if (board.getBoard()[x1][y1 - 1].equals(\"O\"\
    ) || board.getBoard()[x1][y2 + 1].equals(\"O\")) {\n                         \
    \           System.out.println(\"Error! You placed it too close to another one.\
    \ Try again:\\n\");\n                                    continue label;\n   \
    \                             }\n                            } else {\n      \
    \                          if (board.getBoard()[x1][y1 - 1].equals(\"O\")) {\n\
    \                                    System.out.println(\"Error! You placed it\
    \ too close to another one. Try again:\\n\");\n                              \
    \      continue label;\n                                }\n                  \
    \          }\n                        }\n                        int j = 0;\n\
    \                        for (int i = y1; i <= y2; i++) {\n                  \
    \          board.getBoard()[x1][i] = \"O\";\n                            arrayOfShipLocations[j]\
    \ = (x1 * 10 + i);\n                            j++;\n                       \
    \ }\n                        ship.setShipLocation(arrayOfShipLocations);\n   \
    \                     board.printBoard();\n                        // remove test\
    \ below!\n//                        System.out.println(\">> testing ship's locations\
    \ array:\\n>> \" + ship + Arrays.toString(ship.getShipLocation()));\n//      \
    \                  System.out.println(Arrays.toString(ship.getLoc()));\n\n   \
    \                     break;\n                    } else {\n                 \
    \       System.out.println(\"Error! Wrong length of the \" + ship.getName() +\
    \ \"! Try again:\\n\");\n                    }\n                } else if (y1\
    \ == y2) {                      // it's vertical!\n                    if ((x2\
    \ - x1 + 1) == ship.getSize()) {  // ship size is OK!\n//                    System.out.println(\"\
    size OK!\");\n\n                        //checking placement on the board for\
    \ collisions and overlapping - vertically\n                        for (int i\
    \ = x1; i <= x2; i++) {\n                            if (board.getBoard()[i][y1].equals(\"\
    O\")) {\n                                System.out.println(\"Error! This place\
    \ is occupied.\\n\");\n                                continue label;\n     \
    \                       }\n                            if (x2 != 10) {\n     \
    \                           if (board.getBoard()[i + 1][y1].equals(\"O\") || board.getBoard()[i\
    \ - 1][y1].equals(\"O\")) {\n                                    System.out.println(\"\
    Error! You placed it too close to another one. Try again:\\n\");\n           \
    \                         continue label;\n                                }\n\
    \                            }\n                            if (y1 != 10) {\n\
    \                                if (board.getBoard()[i][y1 - 1].equals(\"O\"\
    ) || board.getBoard()[i][y2 + 1].equals(\"O\")) {\n                          \
    \          System.out.println(\"Error! You placed it too close to another one.\
    \ Try again:\\n\");\n                                    continue label;\n   \
    \                             }\n                            } else {\n      \
    \                          if (board.getBoard()[i][y1 - 1].equals(\"O\")) {\n\
    \                                    System.out.println(\"Error! There is other\
    \ ship on the left next to this place.\\n\");\n                              \
    \      continue label;\n                                }\n                  \
    \          }\n                        }\n                        int j = 0;\n\
    \                        for (int i = x1; i <= x2; i++) {\n                  \
    \          board.getBoard()[i][y1] = \"O\";\n                            arrayOfShipLocations[j]\
    \ = (i * 10 + y1);\n                            j++;\n                       \
    \ }\n                        board.printBoard();\n                        ship.setShipLocation(arrayOfShipLocations);\n\
    \                        // remove test below!\n//                        System.out.println(\"\
    >> testing ship's locations array:\\n>> \" + ship + Arrays.toString(ship.getShipLocation()));\n\
    \n                        break;\n                    } else {\n//           \
    \             System.out.println(\"Error! Wrong ship size! Try again.\\n\");\n\
    \                        System.out.println(\"Error! Wrong length of the \" +\
    \ ship.getName() + \"! Try again:\\n\");\n                    }\n            \
    \    } else {\n                    System.out.println(\"Error! Wrong ship location!\
    \ Try again.\\n\");\n                }\n            } else {\n               \
    \ System.out.println(\"Error! Wrong location! Try again.\\n\");\n            }\n\
    \        }   // end of while loop\n    }\n    \n    public void play() {\n\n//\
    \        int shipCounter = (5 + 4 + 3 + 3 + 2);\n//        shipCounter = 7;  //\
    \ test counter\n\n        System.out.println(\"The game starts!\");\n        board.printHiddenBoard();\n\
    \        System.out.print(\"Take a shot!\\n\\n> \");\n\n        // scanning, checking\
    \ and validating shots coordinates.\n        while (true) {\n            scanner.reset();\n\
    \            scanner = new Scanner(System.in);\n            String shotCoordinate\
    \ = scanner.next();\n            // coordinates on board to ints\n           \
    \ int x1 = Character.toUpperCase(shotCoordinate.charAt(0)) - 'A' + 1;  // letter\
    \ (horizontal)\n            int y1 = Integer.parseInt(shotCoordinate.substring(1));\
    \               // number (vertical)\n\n            if (x1 > 0 && y1 > 0 && x1\
    \ <= 10 && y1 <= 10) {\n                if (board.getBoard()[x1][y1].equals(\"\
    M\")) {\n                    System.out.print(\"\\nError! You've already shot\
    \ this spot.. Try again:\\n\\n> \");\n//                    System.out.print(\"\
    \\nYou hit a ship! Try again:\\n> \");\n\n                } else if (board.getBoard()[x1][y1].equals(\"\
    O\") || board.getBoard()[x1][y1].equals(\"X\")) {\n                    board.getBoard()[x1][y1]\
    \ = \"X\";\n                    board.getHiddenBoard()[x1][y1] = \"X\";\n//  \
    \                  shipCounter--;\n                    board.printHiddenBoard();\n\
    //                    if (board.checker(x1, y1)) {\n//                       \
    \ System.out.print(\"\\nYou hit a ship! Try again:\\n\\n> \");\n//           \
    \         } else\n\n                    board.shipHitCounter(x1, y1);\n\n    \
    \                if (board.getShipCounter() == 0) {\n                        System.out.println(\"\
    You sank the last ship. You won. Congratulations!\");\n                      \
    \  break;\n                    }\n//                    else {\n//           \
    \             System.out.println(\"You sank a ship!\");\n//                  \
    \  }\n\n\n                } else {\n                    board.getBoard()[x1][y1]\
    \ = \"M\";\n                    board.getHiddenBoard()[x1][y1] = \"M\";\n    \
    \                board.printHiddenBoard();\n                    System.out.print(\"\
    You missed! Try again:\\n\\n> \");\n                }\n//                Board.printBoard();\n\
    //                break;\n            } else {\n                System.out.print(\"\
    \\nError! You entered the wrong coordinates! Try again:\\n\\n> \");\n        \
    \    }\n        }\n    }\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Unchecked
record: -1
